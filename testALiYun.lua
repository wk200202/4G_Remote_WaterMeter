module(..., package.seeall)


require "aLiYun"
require "misc"
require "pm"

require "pins"
require "scanCode"
require "utils"
require "common"

local DEFAULT_WIDTH, DEFAULT_HEIGHT = 640, 480

sys.taskInit(
	function()
		sys.wait(5000)
		--挂起五秒，等待模块开机
		pm.wake("WAKE")
		--模块开机后调用pm.wake(tag)(这里"WAKE"为tag),使系统保持唤醒状态
	end
)

-- gc0310摄像头30w参数配置
local gc0310_ddr_big = {
	zbar_scan = 0,
	i2c_addr = 0x21,
	sensor_width = 640,
	sensor_height = 480,
	id_reg = 0xf1,
	id_value = 0x10,
	spi_mode = disp.CAMERA_SPI_MODE_LINE2,
	spi_speed = disp.CAMERA_SPEED_DDR,
	spi_yuv_out = disp.CAMERA_SPI_OUT_Y1_V0_Y0_U0,
	init_cmd = {
		0xfe,
		0xf0,
		0xfe,
		0xf0,
		0xfe,
		0x00,
		0xfc,
		0x16,
		0xfc,
		0x16,
		0xf2,
		0x07,
		0xf3,
		0x83,
		0xf5,
		0x07,
		0xf7,
		0x89,
		0xf8,
		0x01,
		0xf9,
		0x4f,
		0xfa,
		0x11,
		0xfc,
		0xce,
		0xfd,
		0x00,
		0x00,
		0x2f,
		0x01,
		0x0f,
		0x02,
		0x04,
		0x03,
		0x02,
		0x04,
		0x12,
		0x09,
		0x00,
		0x0a,
		0x00,
		0x0b,
		0x00,
		0x0c,
		0x04,
		0x0d,
		0x01,
		0x0e,
		0xe8,
		0x0f,
		0x02,
		0x10,
		0x88,
		0x16,
		0x00,
		0x17,
		0x14,
		0x18,
		0x1a,
		0x19,
		0x14,
		0x1b,
		0x48,
		0x1c,
		0x6c,
		0x1e,
		0x6b,
		0x1f,
		0x28,
		0x20,
		0x8b,
		0x21,
		0x49,
		0x22,
		0xd0,
		0x23,
		0x04,
		0x24,
		0xff,
		0x34,
		0x20,
		0x26,
		0x23,
		0x28,
		0xff,
		0x29,
		0x00,
		0x32,
		0x04,
		0x33,
		0x10,
		0x37,
		0x20,
		0x38,
		0x10,
		0x47,
		0x80,
		0x4e,
		0x66,
		0xa8,
		0x02,
		0xa9,
		0x80,
		0x40,
		0xff,
		0x41,
		0x21,
		0x42,
		0xcf,
		0x44,
		0x02,
		0x45,
		0xa8,
		0x46,
		0x02,
		0x4a,
		0x11,
		0x4b,
		0x01,
		0x4c,
		0x20,
		0x4d,
		0x05,
		0x4f,
		0x01,
		0x50,
		0x01,
		0x55,
		0x01,
		0x56,
		0xe0,
		0x57,
		0x02,
		0x58,
		0x80,
		0x70,
		0x70,
		0x5a,
		0x84,
		0x5b,
		0xc9,
		0x5c,
		0xed,
		0x77,
		0x74,
		0x78,
		0x40,
		0x79,
		0x5f,
		0x82,
		0x08,
		0x83,
		0x0b,
		0x89,
		0xf0,
		0x8f,
		0xaa,
		0x90,
		0x8c,
		0x91,
		0x90,
		0x92,
		0x03,
		0x93,
		0x03,
		0x94,
		0x05,
		0x95,
		0x43,
		0x96,
		0xf0,
		0xfe,
		0x00,
		0x9a,
		0x20,
		0x9b,
		0x80,
		0x9c,
		0x40,
		0x9d,
		0x80,
		0xa1,
		0x30,
		0xa2,
		0x32,
		0xa4,
		0x80,
		0xa5,
		0x28,
		0xaa,
		0x30,
		0xac,
		0x22,
		0xfe,
		0x00,
		0xbf,
		0x08,
		0xc0,
		0x16,
		0xc1,
		0x28,
		0xc2,
		0x41,
		0xc3,
		0x5a,
		0xc4,
		0x6c,
		0xc5,
		0x7a,
		0xc6,
		0x96,
		0xc7,
		0xac,
		0xc8,
		0xbc,
		0xc9,
		0xc9,
		0xca,
		0xd3,
		0xcb,
		0xdd,
		0xcc,
		0xe5,
		0xcd,
		0xf1,
		0xce,
		0xfa,
		0xcf,
		0xff,
		0xd0,
		0x40,
		0xd1,
		0x38,
		0xd2,
		0x38,
		0xd3,
		0x50,
		0xd6,
		0xf2,
		0xd7,
		0x1b,
		0xd8,
		0x18,
		0xdd,
		0x03,
		0xfe,
		0x01,
		0x05,
		0x30,
		0x06,
		0x75,
		0x07,
		0x40,
		0x08,
		0xb0,
		0x0a,
		0xc5,
		0x0b,
		0x11,
		0x0c,
		0x00,
		0x12,
		0x52,
		0x13,
		0x38,
		0x18,
		0x95,
		0x19,
		0x96,
		0x1f,
		0x20,
		0x20,
		0xc0,
		0x3e,
		0x40,
		0x3f,
		0x57,
		0x40,
		0x7d,
		0x03,
		0x60,
		0x44,
		0x02,
		0xfe,
		0x01,
		0x1c,
		0x91,
		0x21,
		0x15,
		0x50,
		0x80,
		0x56,
		0x04,
		0x59,
		0x08,
		0x5b,
		0x02,
		0x61,
		0x8d,
		0x62,
		0xa7,
		0x63,
		0xd0,
		0x65,
		0x06,
		0x66,
		0x06,
		0x67,
		0x84,
		0x69,
		0x08,
		0x6a,
		0x25,
		0x6b,
		0x01,
		0x6c,
		0x00,
		0x6d,
		0x02,
		0x6e,
		0xf0,
		0x6f,
		0x80,
		0x76,
		0x80,
		0x78,
		0xaf,
		0x79,
		0x75,
		0x7a,
		0x40,
		0x7b,
		0x50,
		0x7c,
		0x0c,
		0x90,
		0xc9,
		0x91,
		0xbe,
		0x92,
		0xe2,
		0x93,
		0xc9,
		0x95,
		0x1b,
		0x96,
		0xe2,
		0x97,
		0x49,
		0x98,
		0x1b,
		0x9a,
		0x49,
		0x9b,
		0x1b,
		0x9c,
		0xc3,
		0x9d,
		0x49,
		0x9f,
		0xc7,
		0xa0,
		0xc8,
		0xa1,
		0x00,
		0xa2,
		0x00,
		0x86,
		0x00,
		0x87,
		0x00,
		0x88,
		0x00,
		0x89,
		0x00,
		0xa4,
		0xb9,
		0xa5,
		0xa0,
		0xa6,
		0xba,
		0xa7,
		0x92,
		0xa9,
		0xba,
		0xaa,
		0x80,
		0xab,
		0x9d,
		0xac,
		0x7f,
		0xae,
		0xbb,
		0xaf,
		0x9d,
		0xb0,
		0xc8,
		0xb1,
		0x97,
		0xb3,
		0xb7,
		0xb4,
		0x7f,
		0xb5,
		0x00,
		0xb6,
		0x00,
		0x8b,
		0x00,
		0x8c,
		0x00,
		0x8d,
		0x00,
		0x8e,
		0x00,
		0x94,
		0x55,
		0x99,
		0xa6,
		0x9e,
		0xaa,
		0xa3,
		0x0a,
		0x8a,
		0x00,
		0xa8,
		0x55,
		0xad,
		0x55,
		0xb2,
		0x55,
		0xb7,
		0x05,
		0x8f,
		0x00,
		0xb8,
		0xcb,
		0xb9,
		0x9b,
		0xfe,
		0x01,
		0xd0,
		0x38,
		0xd1,
		0x00,
		0xd2,
		0x02,
		0xd3,
		0x04,
		0xd4,
		0x38,
		0xd5,
		0x12,
		0xd6,
		0x30,
		0xd7,
		0x00,
		0xd8,
		0x0a,
		0xd9,
		0x16,
		0xda,
		0x39,
		0xdb,
		0xf8,
		0xfe,
		0x01,
		0xc1,
		0x3c,
		0xc2,
		0x50,
		0xc3,
		0x00,
		0xc4,
		0x40,
		0xc5,
		0x30,
		0xc6,
		0x30,
		0xc7,
		0x10,
		0xc8,
		0x00,
		0xc9,
		0x00,
		0xdc,
		0x20,
		0xdd,
		0x10,
		0xdf,
		0x00,
		0xde,
		0x00,
		0x01,
		0x10,
		0x0b,
		0x31,
		0x0e,
		0x50,
		0x0f,
		0x0f,
		0x10,
		0x6e,
		0x12,
		0xa0,
		0x15,
		0x60,
		0x16,
		0x60,
		0x17,
		0xe0,
		0xcc,
		0x0c,
		0xcd,
		0x10,
		0xce,
		0xa0,
		0xcf,
		0xe6,
		0x45,
		0xf7,
		0x46,
		0xff,
		0x47,
		0x15,
		0x48,
		0x03,
		0x4f,
		0x60,
		0xfe,
		0x00,
		0x05,
		0x01,
		0x06,
		0x89,
		0x07,
		0x00,
		0x08,
		0x2a,
		0xfe,
		0x01,
		0x25,
		0x00,
		0x26,
		0x6d,
		0x27,
		0x01,
		0x28,
		0xb4,
		0x29,
		0x02,
		0x2a,
		0x8e,
		0x2b,
		0x02,
		0x2c,
		0xfb,
		0x2d,
		0x07,
		0x2e,
		0x3d,
		0x3c,
		0x20,
		0x50,
		0x01,
		0x51,
		0x00,
		0x52,
		0x00,
		0x53,
		0x00,
		0x54,
		0x00,
		0x55,
		0x01,
		0x56,
		0xe0,
		0x57,
		0x02,
		0x58,
		0x80,
		0xfe,
		0x03,
		0x01,
		0x00,
		0x02,
		0x00,
		0x10,
		0x00,
		0x15,
		0x00,
		0x17,
		0x00,
		0x04,
		0x10,
		0x05,
		0x00,
		0x40,
		0x00,
		0x52,
		0xa0,
		0x53,
		0x24,
		0x54,
		0x20,
		0x55,
		0x20,
		0x5a,
		0x00,
		0x5b,
		0x80,
		0x5c,
		0x02,
		0x5d,
		0xe0,
		0x5e,
		0x01,
		0x51,
		0x03,
		0x64,
		0x06,
		0xfe,
		0x00
	}
}

local REGION_ID = "cn-shanghai"
--三元组信息
local PRODUCT_KEY = "k0qdbly6K5r"
local DEVICE_NAME = "Air724UG"
local DEVICE_SECRET = "d14db76c90a31f5799ab53e7be13ebc6"

local MyProductKey = PRODUCT_KEY --该变量会携带在发送的图片数据里面
local MyDeviceName = DEVICE_NAME --该变量会携带在发送的图片数据里面

-- 获取设备名称
local function getDeviceName()
	return DEVICE_NAME
end

-- 获取设备密钥
local function getDeviceSecret()
	return DEVICE_SECRET
end

--用于将图片装换为16进制字符串
local function hex2str(hex)
	--判断输入类型
	if (type(hex) ~= "string") then
		return nil, "hex2str invalid input type"
	end
	--拼接字符串
	local index = 1
	local ret = ""
	for index = 1, hex:len() do
		ret = ret .. string.format("%02X", hex:sub(index):byte())
	end
	return ret
end

--阿里云客户端是否处于连接状态
local sConnected

local publishCnt = 1

--发布消息
--API：aLiYun.publish(topic, payload, qos, cbFnc, cbPara)
function publishTest()
	if sConnected then
		aLiYun.publish(
			"/" .. PRODUCT_KEY .. "/" .. getDeviceName() .. "/update",
			"qos1data",
			1,
			publishTestCb,
			"publishTest_" .. publishCnt
		)
	end
end

--消息发布结果的回调函数
--cbFnc(result,cbPara)
--result为true表示发布成功，false或者nil表示订阅失败
--cbPara为本接口中的第5个参数
local function publishTestCb(result, para)
	log.info("Mqtt.QoS", result, para)
end

--- 订阅主题，绑定回调函数
-- @bool result，连接结果，true表示连接成功，false或者nil表示连接失败
local function connectCbFnc(result)
	log.info("testALiYun.connectCbFnc", result)
	sConnected = result
	if result then
		--订阅主题，不需要考虑订阅结果，如果订阅失败，aLiYun库中会自动重连
		aLiYun.on("receive", rcvCbFnc)
		--PUBLISH消息测试
		publishTest()
	end
end

---数据接收回调函数
local function rcvCbFnc(topic, qos, payload)
	log.info("testALiYun.rcvCbFnc", topic, qos, payload)
end
---------------------------------------------------------------------------------------
local gpio_flag = 0
local send_imag_flag = 0

local random = 0
local send_imag_count = 0
function takePhotoAndSendToMQTT()
	pm.wake("testALiYun.takePhotoAndSendToMQTT")

	if sConnected then
		--打开摄像头
		ret = disp.cameraopen_ext(gc0310_ddr_big)
		log.info("testphoto", ret)
		--设置摄像头采集参数
		disp.cameracapture(DEFAULT_WIDTH, DEFAULT_HEIGHT)
		--设置照片保存路径
		disp.camerasavephoto("/testCamera.jpg")
		--打印文件大小
		local fileSize = io.fileSize("/testCamera.jpg")
		log.info("testCamera.takePhotoAndSendToUart fileSize", fileSize)
		--关闭摄像头预览
		disp.camerapreviewclose()
		--关闭摄像头
		disp.cameraclose()

		log.info("socketClient.isReady")

		local fileHandle = io.open("/testCamera.jpg", "rb")
		--读取存储的摄像头图片
		if fileHandle then
			--轮训读取1460字节数据发送到UDP
			local index = 0
			local count = fileSize / 2184
			local remainder = fileSize % 2184

			random = random + count
			random = random + remainder

			while random > 100000 do
				random = random - 88888
				random = random + remainder
			end

			if remainder > 0 then
				count = count + 1
			end

			local maxSize = string.format("%04x", fileSize)

			log.info("count & maxSize =", count, maxSize)

			while true do
				local data = fileHandle:read(2184)
				if not data then
					break
				end

				--需要发送到的信息格式
				--img:以AABBCCDD为头部，以AABBCCDD为尾部，中间为图片数据
				--index：图片的序号
				--count：图片的总数
				--maxSize：图片的总大小
				--productKey：产品的key
				--deviceName：设备的名称
				--id:为随机数，用于标识图片的唯一性
				aLiYun.publish(
					"/" .. PRODUCT_KEY .. "/" .. getDeviceName() .. "/user/update",
					'{"img":"AABBCCDDEE' ..
						hex2str(data) ..
							'AABBCCDDEE",' ..
								'"index":' ..
									index ..
										"," ..
											'"count":' ..
												count ..
													"," ..
														'"maxSize":"' ..
															maxSize ..
																'",' ..
																	'"productKey":"' ..
																		MyProductKey .. '",' .. '"deviceName":"' .. MyDeviceName .. '",' .. '"id":' .. random .. "}",
					0,
					publishTestCb,
					"publishTest_" .. publishCnt
				)

				index = index + 1
			end

			send_imag_count = send_imag_count + 1
			if send_imag_count < 1 then --设置拍几张照片,默认一张
				sys.timerStart(takePhotoAndSendToMQTT, 5000)
				log.info("sys.timerStart(takePhotoAndSendToMQTT,5000)")
			else
				send_imag_flag = 0

				log.info("send_imag_flag = 0;")
			end
		else
			log.info("fileHandle err")
		end
	else
		log.info("mqtt disconnected")
		sys.timerStart(takePhotoAndSendToMQTT, 500)
	end

	pm.sleep("testALiYun.takePhotoAndSendToMQTT")
end

---------------------------------------------------------------------------------------

aLiYun.on("connect", connectCbFnc)
aLiYun.setRegion(REGION_ID)
aLiYun.setConnectMode("direct",PRODUCT_KEY..".iot-as-mqtt."..REGION_ID..".aliyuncs.com",1883)
aLiYun.setup(PRODUCT_KEY, nil, getDeviceName, getDeviceSecret)

--每1分钟拍照上传一次
sys.timerLoopStart(takePhotoAndSendToMQTT, 30000)
